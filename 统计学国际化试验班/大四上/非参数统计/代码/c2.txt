# page 10

x=c(37, 55, 57); y=c(23, 31, 70)
# manual calculation    
num = mean(x)-mean(y)
m=length(x); n=length(y)
Sp2 = ((m-1)*var(x)+(n-1)*var(y))/(m+n-2)
denom = sqrt(Sp2) * sqrt(1/m+1/n)
tobs = num/denom
(pval = 1-pt(tobs, m+n-2))
alpha=0.05
(critical.val = qt(1-alpha, m+n-2))
##95% confidence interval
c(num-qt(1-0.025,m+n-2)*denom, num+qt(1-0.025,m+n-2)*denom)
# or use the existing function
t.test(x, y, var.equal=T, alternative="greater") #one-sided confi. bound
t.test(x, y, var.equal=T, alternative="two.sided")


# 2.2.2  page 17 
#idx = combinations(n=6, r=3)
idx=t(combn(1:6,3))


x=c(37,55,57)
y=c(23,31,70)
xy = c(x,y) # the combined data set

permut = NULL # the permuted data set (a 20*6 matrix)
for(i in 1:20){
permut = rbind(permut, c(xy[idx[i,]], xy[-idx[i,]]))
}

permut.x = permut[, 1:3] # the permuted X matrix (20*3)
permut.y = permut[, 4:6] # the permuted Y matrix (20*3)
delta1 = apply(permut.x, 1, mean) - apply(permut.y, 1, mean)
delta2 = apply(permut.x, 1, median) - apply(permut.y, 1, median)
delta1.obs = mean(x)-mean(y)
delta2.obs = median(x) - median(y)
#pvalue for permutation of sample mean
pval1.upper = mean(delta1 >= delta1.obs) #upper-tailed
pval1.2sided = mean(abs(delta1) >= abs(delta1.obs)) #two-tailed
pval2.upper = mean(delta2 >= delta2.obs) #upper-tailed
pval2.2sided = mean(abs(delta2) >= abs(delta2.obs)) #two-tailed


# Example 2.2.2
source("functions-Ch2.R")
dat = read.csv("toleration-violence.csv")
x = dat[,1]
y = dat[,2]
# take a look at the data
par(mfrow=c(1,3))
hist(x)
hist(y)
boxplot(x, y, names=c("x","y"))

rand.perm(x, y, R=1000, alternative = "less", stat= "mediandiff")
rand.perm(x, y, R=1000, alternative = "less", stat= "meandiff")
t.test(x, y, "less")


#2.3.2  
idx = t(combn(1:6,3))    # combinations(n=6, r=3)
x=c(37,55,57)
y=c(23,31,70)
xy = c(x,y) # the combined data set
rxy=rank(xy)
sum(rxy[1:3])

mean(apply(idx[,1:3], 1, sum)>=12)
mean(apply(idx[,1:3], 1, sum)<=12)
2*(min(0.35, 0.8))

# treatment 1==n, treatment 2==m 


# Example 2.3.1 
x=c(0.65,0.59,0.44,0.60,0.47,0.58,0.66,0.52,0.51)
y = c(0.55,0.67,0.63,0.79,0.81,0.85,0.68)
xy =c(x,y)
sort(xy)
#obtain the ranks of x
(m=length(x))
(n=length(y))
(rank.x = rank(xy)[1:m])
#rank sum statistic
(W=sum(rank.x))
# CV=60 reject

eW=m*(n+m+1)/2
vW=m*n*(m+n+1)/12

pnorm((W-eW)/sqrt(vW))
wilcox.test(x,y, "less")



# Example 2.4.1
x=c(3.6, 3.9, 4.0, 4.3)
y=c(3.8, 4.1, 4.5, 4.8)
sum(outer(x,y,"-")<0)
y2=c(3.8, 4.0, 4.5, 4.8)
sum(outer(x,y2,"-")<0)+sum(outer(x,y2,"-")==0)/2
wilcox.test(y, x, paired=FALSE)
wilcox.test(y2, x, paired=FALSE)


# Example 2.5.1
x=c(77,78,70,72,65,74)
y=c(60,62,70,76,68,72,70)
temp=sort(outer(x,y,"-"))
median(temp)
# Table A4 6,36 
temp[7]
temp[36]


# Example 2.7.1
x=c(16.55, 15.36, 15.94, 16.43, 16.01)
y=c(16.05, 15.98, 16.1, 15.88, 15.91)
xy=c(x,y)
m=length(x)

d=sort(c(x,y))
ma=length(d)

r=ma%%4

k=(ma-r)/4


if(r==0) dd=c(ma-3,ma,ma-1,ma-2)
if(r==1) dd=c(ma)
if(r==2) dd=c(ma-1,ma)
if(r==3) dd=c(ma-2,ma,ma-1)

while (k!=0){
dd=c((k-1)*4+1,(k-1)*4+4,dd,(k-1)*4+3,(k-1)*4+2)
k=k-1
}

xr=dd[rank(xy)[1:m]]
yr=dd[rank(xy)[(m+1):ma]]

sum(dd[rank(xy)[1:m]] )    # From Table, [17,38]; not reject    if T4, 17-15, 25-(17-15)
  

wilcox.test(xr,yr)[1]$stat+m*(m+1)/2
wilcox.test(xr,yr)[3]$p.value


pert=rep(0,0)

for (i in 1:500)
{idx=sample(1:10)
xn=xy[idx[1:m]]
yn=xy[idx[(m+1):ma]]
test=sd(xn)/sd(yn)
pert=c(pert, test)}

test=sd(x)/sd(y)
mean(pert>=test)


## Example 2.7.2  plot the ECDF curves
plot(ecdf(x), verticals=TRUE)
lines(ecdf(y), verticals=TRUE, col="red", lty="dashed")
ks.test(x,y)

